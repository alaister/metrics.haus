"""
A high precision floating point value represented as a string
"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}

"""
An arbitrary size integer represented as a string
"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""
A date wihout time information
"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

"""
A date and time
"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

enum FilterIs {
  NULL
  NOT_NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

"""
A Javascript Object Notation value serialized as a string
"""
scalar JSON

enum MetricInterval {
  minute
  hour
  day
  week
  month
}

"""
Boolean expression comparing fields on type "MetricInterval"
"""
input MetricIntervalFilter {
  eq: MetricInterval
  in: [MetricInterval!]
  is: FilterIs
  neq: MetricInterval
}

type Metrics implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!
  interval: MetricInterval!
  name: String!
  description: String
  unitShort: String
  icon: String
  archived: Boolean
  teamId: UUID!
  team: Teams!
  metricsDataPointsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsDataPointsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsDataPointsOrderBy!]
  ): MetricsDataPointsConnection
  metricsOwnersCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsOwnersFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsOwnersOrderBy!]
  ): MetricsOwnersConnection
}

type MetricsConnection {
  edges: [MetricsEdge!]!
  pageInfo: PageInfo!
}

type MetricsDataPoints implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  time: Datetime!
  metricId: UUID!
  value: Float!
  reportedBy: UUID!
  metric: Metrics!
  profiles: Profiles!
}

type MetricsDataPointsConnection {
  edges: [MetricsDataPointsEdge!]!
  pageInfo: PageInfo!

  """
  The total number of records matching the `filter` criteria
  """
  totalCount: Int!
}

type MetricsDataPointsDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [MetricsDataPoints!]!
}

type MetricsDataPointsEdge {
  cursor: String!
  node: MetricsDataPoints!
}

input MetricsDataPointsFilter {
  time: DatetimeFilter
  metricId: UUIDFilter
  value: FloatFilter
  reportedBy: UUIDFilter
  nodeId: IDFilter
}

input MetricsDataPointsInsertInput {
  time: Datetime
  metricId: UUID
  value: Float
}

type MetricsDataPointsInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [MetricsDataPoints!]!
}

input MetricsDataPointsOrderBy {
  time: OrderByDirection
  metricId: OrderByDirection
  value: OrderByDirection
  reportedBy: OrderByDirection
}

type MetricsDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Metrics!]!
}

type MetricsEdge {
  cursor: String!
  node: Metrics!
}

input MetricsFilter {
  id: UUIDFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  interval: MetricIntervalFilter
  name: StringFilter
  description: StringFilter
  unitShort: StringFilter
  icon: StringFilter
  archived: BooleanFilter
  teamId: UUIDFilter
  nodeId: IDFilter
}

input MetricsInsertInput {
  interval: MetricInterval
  name: String
  description: String
  unitShort: String
  icon: String
  teamId: UUID
}

type MetricsInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Metrics!]!
}

input MetricsOrderBy {
  id: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
  interval: OrderByDirection
  name: OrderByDirection
  description: OrderByDirection
  unitShort: OrderByDirection
  icon: OrderByDirection
  archived: OrderByDirection
  teamId: OrderByDirection
}

type MetricsOwners implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  metricId: UUID!
  profileId: UUID!
  createdAt: Datetime!
  metric: Metrics!
  profile: Profiles!
}

type MetricsOwnersConnection {
  edges: [MetricsOwnersEdge!]!
  pageInfo: PageInfo!
}

type MetricsOwnersDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [MetricsOwners!]!
}

type MetricsOwnersEdge {
  cursor: String!
  node: MetricsOwners!
}

input MetricsOwnersFilter {
  metricId: UUIDFilter
  profileId: UUIDFilter
  createdAt: DatetimeFilter
  nodeId: IDFilter
}

input MetricsOwnersInsertInput {
  metricId: UUID
  profileId: UUID
  createdAt: Datetime
}

type MetricsOwnersInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [MetricsOwners!]!
}

input MetricsOwnersOrderBy {
  metricId: OrderByDirection
  profileId: OrderByDirection
  createdAt: OrderByDirection
}

input MetricsOwnersUpdateInput {
  metricId: UUID
  profileId: UUID
  createdAt: Datetime
}

type MetricsOwnersUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [MetricsOwners!]!
}

input MetricsUpdateInput {
  interval: MetricInterval
  name: String
  description: String
  unitShort: String
  icon: String
  archived: Boolean
}

type MetricsUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Metrics!]!
}

"""
The root type for creating and mutating data
"""
type Mutation {
  """
  Deletes zero or more records from the `Metrics` collection
  """
  deleteFromMetricsCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: MetricsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): MetricsDeleteResponse!

  """
  Deletes zero or more records from the `MetricsDataPoints` collection
  """
  deleteFromMetricsDataPointsCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: MetricsDataPointsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): MetricsDataPointsDeleteResponse!

  """
  Deletes zero or more records from the `MetricsOwners` collection
  """
  deleteFromMetricsOwnersCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: MetricsOwnersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): MetricsOwnersDeleteResponse!

  """
  Deletes zero or more records from the `Notifications` collection
  """
  deleteFromNotificationsCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: NotificationsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): NotificationsDeleteResponse!

  """
  Deletes zero or more records from the `TeamMembers` collection
  """
  deleteFromTeamMembersCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: TeamMembersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TeamMembersDeleteResponse!

  """
  Deletes zero or more records from the `Teams` collection
  """
  deleteFromTeamsCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: TeamsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TeamsDeleteResponse!

  """
  Adds one or more `Metrics` records to the collection
  """
  insertIntoMetricsCollection(
    objects: [MetricsInsertInput!]!
  ): MetricsInsertResponse

  """
  Adds one or more `MetricsDataPoints` records to the collection
  """
  insertIntoMetricsDataPointsCollection(
    objects: [MetricsDataPointsInsertInput!]!
  ): MetricsDataPointsInsertResponse

  """
  Adds one or more `MetricsOwners` records to the collection
  """
  insertIntoMetricsOwnersCollection(
    objects: [MetricsOwnersInsertInput!]!
  ): MetricsOwnersInsertResponse

  """
  Adds one or more `Notifications` records to the collection
  """
  insertIntoNotificationsCollection(
    objects: [NotificationsInsertInput!]!
  ): NotificationsInsertResponse

  """
  Adds one or more `Teams` records to the collection
  """
  insertIntoTeamsCollection(objects: [TeamsInsertInput!]!): TeamsInsertResponse

  """
  Updates zero or more records in the `Metrics` collection
  """
  updateMetricsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: MetricsUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: MetricsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): MetricsUpdateResponse!

  """
  Updates zero or more records in the `MetricsOwners` collection
  """
  updateMetricsOwnersCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: MetricsOwnersUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: MetricsOwnersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): MetricsOwnersUpdateResponse!

  """
  Updates zero or more records in the `Notifications` collection
  """
  updateNotificationsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: NotificationsUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: NotificationsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): NotificationsUpdateResponse!

  """
  Updates zero or more records in the `Profiles` collection
  """
  updateProfilesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ProfilesUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: ProfilesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): ProfilesUpdateResponse!

  """
  Updates zero or more records in the `Teams` collection
  """
  updateTeamsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: TeamsUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: TeamsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TeamsUpdateResponse!
}

interface Node {
  """
  Retrieves a record by `ID`
  """
  nodeId: ID!
}

type Notifications implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: UUID!
  createdAt: Datetime
  text: String
  profileId: UUID!
  metadata: JSON
  profile: Profiles!
}

type NotificationsConnection {
  edges: [NotificationsEdge!]!
  pageInfo: PageInfo!
}

type NotificationsDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Notifications!]!
}

type NotificationsEdge {
  cursor: String!
  node: Notifications!
}

input NotificationsFilter {
  id: UUIDFilter
  createdAt: DatetimeFilter
  text: StringFilter
  profileId: UUIDFilter
  nodeId: IDFilter
}

input NotificationsInsertInput {
  id: UUID
  createdAt: Datetime
  text: String
  profileId: UUID
  metadata: JSON
}

type NotificationsInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Notifications!]!
}

input NotificationsOrderBy {
  id: OrderByDirection
  createdAt: OrderByDirection
  text: OrderByDirection
  profileId: OrderByDirection
}

input NotificationsUpdateInput {
  id: UUID
  createdAt: Datetime
  text: String
  profileId: UUID
  metadata: JSON
}

type NotificationsUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Notifications!]!
}

"""
Any type not handled by the type system
"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}

"""
Defines a per-field sorting order
"""
enum OrderByDirection {
  """
  Ascending order, nulls first
  """
  AscNullsFirst

  """
  Ascending order, nulls last
  """
  AscNullsLast

  """
  Descending order, nulls first
  """
  DescNullsFirst

  """
  Descending order, nulls last
  """
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Profiles implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!
  name: String!
  avatarPath: String
  teamMembersCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: TeamMembersFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [TeamMembersOrderBy!]
  ): TeamMembersConnection
  metricsDataPointsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsDataPointsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsDataPointsOrderBy!]
  ): MetricsDataPointsConnection
  metricsOwnersCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsOwnersFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsOwnersOrderBy!]
  ): MetricsOwnersConnection
  notificationsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: NotificationsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [NotificationsOrderBy!]
  ): NotificationsConnection
}

type ProfilesConnection {
  edges: [ProfilesEdge!]!
  pageInfo: PageInfo!
}

type ProfilesEdge {
  cursor: String!
  node: Profiles!
}

input ProfilesFilter {
  id: UUIDFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  name: StringFilter
  avatarPath: StringFilter
  nodeId: IDFilter
}

input ProfilesOrderBy {
  id: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
  name: OrderByDirection
  avatarPath: OrderByDirection
}

input ProfilesUpdateInput {
  name: String
}

type ProfilesUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Profiles!]!
}

"""
The root type for querying data
"""
type Query {
  """
  A pagable collection of type `Metrics`
  """
  metricsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsOrderBy!]
  ): MetricsConnection

  """
  A pagable collection of type `MetricsDataPoints`
  """
  metricsDataPointsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsDataPointsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsDataPointsOrderBy!]
  ): MetricsDataPointsConnection

  """
  A pagable collection of type `MetricsOwners`
  """
  metricsOwnersCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsOwnersFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsOwnersOrderBy!]
  ): MetricsOwnersConnection

  """
  Retrieve a record by its `ID`
  """
  node(
    """
    The record's `ID`
    """
    nodeId: ID!
  ): Node

  """
  A pagable collection of type `Notifications`
  """
  notificationsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: NotificationsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [NotificationsOrderBy!]
  ): NotificationsConnection

  """
  A pagable collection of type `Profiles`
  """
  profilesCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: ProfilesFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [ProfilesOrderBy!]
  ): ProfilesConnection

  """
  A pagable collection of type `TeamMembers`
  """
  teamMembersCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: TeamMembersFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [TeamMembersOrderBy!]
  ): TeamMembersConnection

  """
  A pagable collection of type `Teams`
  """
  teamsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: TeamsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [TeamsOrderBy!]
  ): TeamsConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}

type TeamMembers implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  teamId: UUID!
  profileId: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!
  profile: Profiles!
  team: Teams!
}

type TeamMembersConnection {
  edges: [TeamMembersEdge!]!
  pageInfo: PageInfo!
}

type TeamMembersDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [TeamMembers!]!
}

type TeamMembersEdge {
  cursor: String!
  node: TeamMembers!
}

input TeamMembersFilter {
  teamId: UUIDFilter
  profileId: UUIDFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  nodeId: IDFilter
}

input TeamMembersOrderBy {
  teamId: OrderByDirection
  profileId: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

type Teams implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: UUID!
  createdAt: Datetime!
  updatedAt: Datetime!
  name: String!
  ssoProviderId: String
  teamMembersCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: TeamMembersFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [TeamMembersOrderBy!]
  ): TeamMembersConnection
  metricsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: MetricsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [MetricsOrderBy!]
  ): MetricsConnection
}

type TeamsConnection {
  edges: [TeamsEdge!]!
  pageInfo: PageInfo!
}

type TeamsDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Teams!]!
}

type TeamsEdge {
  cursor: String!
  node: Teams!
}

input TeamsFilter {
  id: UUIDFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  name: StringFilter
  ssoProviderId: StringFilter
  nodeId: IDFilter
}

input TeamsInsertInput {
  id: UUID
  createdAt: Datetime
  updatedAt: Datetime
  name: String
  ssoProviderId: String
}

type TeamsInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Teams!]!
}

input TeamsOrderBy {
  id: OrderByDirection
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
  name: OrderByDirection
  ssoProviderId: OrderByDirection
}

input TeamsUpdateInput {
  name: String
}

type TeamsUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Teams!]!
}

"""
A time without date information
"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

enum UserEvent {
  view_page
  add_metric
  add_data_point
  update_avatar
}

"""
Boolean expression comparing fields on type "UserEvent"
"""
input UserEventFilter {
  eq: UserEvent
  in: [UserEvent!]
  is: FilterIs
  neq: UserEvent
}

"""
A universally unique identifier
"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}
